<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 implements="com.conceptualideas.chat.interfaces.IDock, com.conceptualideas.chat.interfaces.IDockable,com.conceptualideas.chat.interfaces.IDisposable "
		 creationComplete="init()"
		 width="100%"
		 minHeight="25"
		 xmlns:layouts="com.conceptualideas.chat.layouts.*"
		 xmlns:views="com.conceptualideas.chat.views.*"
		 >


	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		.cameraChooserDialog{
			skinClass:ClassReference('com.conceptualideas.chat.plugins.video.skins.CameraChooserSkin');
		}
		.microphoneChooserDialog{
			skinClass:ClassReference('com.conceptualideas.chat.plugins.video.skins.MicrophoneChooserSkin');
		}
	</fx:Style>

	<fx:Script>
		<![CDATA[
			import com.conceptualideas.chat.plugins.video.core.IVideoController;
			import com.conceptualideas.chat.plugins.video.skins.MicrophoneButtonSkin;
			import com.conceptualideas.chat.plugins.video.skins.WebCamButtonSkin;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.core.IDataRenderer;
			import mx.core.IUIComponent;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;

			public var controller:IVideoController

			private static const ACTION_TOGGLE_BROADCASTING:uint = 1 << 1;
			private static const ACTION_SELECT_CAM:uint = 1 << 2;

			private static const ACTION_TOGGLE_MIC:uint = 1 << 3;
			private static const ACTION_SELECT_MIC:uint = 1 << 4;
			private static const ACTION_TOGGLE_MUTE_STREAMS:uint = 1 << 4;


			private var dpWebCamOptions:ArrayCollection = new ArrayCollection([
				{label:"Start Broadcasting", action:ACTION_TOGGLE_BROADCASTING, selected:false},
				{label:"Select your cam", action:ACTION_SELECT_CAM}
				]);
			private var dpMicOptions:ArrayCollection = new ArrayCollection([
				{label:"Mute your mic", action:ACTION_TOGGLE_MIC, selected:false},
				{label:"Select your mic", action:ACTION_SELECT_MIC},
				{label:"Mute all streams", action:ACTION_TOGGLE_MUTE_STREAMS, selected:false}
				]);


			private var timer:Timer
			private static const HIDE_DELAY:int = 2 * 1000;





			private var popupActive:Boolean


			public function getDock(location:String="default"):IDock
			{
				return null;
			}

			private function init():void
			{
				removeEventListener(FlexEvent.CREATION_COMPLETE, init);
				// evil i say evil


				timer = new Timer(HIDE_DELAY, 1);
				timer.addEventListener(TimerEvent.TIMER_COMPLETE, onTimerCompleted);
			}

			override protected function createChildren():void
			{
				super.createChildren();
				dock.mxmlContent = dockMXMLContent;
				dockMXMLContent = null;

			}

			private function onTimerCompleted(e:TimerEvent):void
			{

				PopUpManager.removePopUp(options);
				systemManager.document.removeEventListener(MouseEvent.MOUSE_DOWN, onOutsideClick);
			}


			private var dockMXMLContent:Array = [];

			public function add(name:String, component:Sprite, callback:Function=null):void
			{

				if (!component is IVisualElement)
					return;

				if (dockMXMLContent)
				{

					dockMXMLContent.push(component);
				}
				else
				{

					dock.addElement(IVisualElement(component));
				}
				component.name = name;
			}

			public function remove(name:String):DisplayObject
			{
				var component:DisplayObject = dock.getChildByName(name);
				if (component)
					dock.removeElement(IVisualElement(component));
				return component;
			}

			public function retrive(name:String):DisplayObject
			{
				return dock.getChildByName(name);
			}

			private function optionsGroup_itemClickHandler(e:Event):void
			{

				var rdr:IDataRenderer = e.target as IDataRenderer;

				handleAction(uint(rdr.data.action));
			}



			private function handleAction(action:uint):void
			{
				switch (action)
				{
					case ACTION_TOGGLE_BROADCASTING:
						controller.togglePublish();
						break;
					case ACTION_SELECT_CAM:
						invokeChooser(new CameraChooserDialog(), chooser_updateCameraHandler);
						break;
					case ACTION_TOGGLE_MIC:
						controller.toggleMute();
						break;
					case ACTION_SELECT_MIC:
						invokeChooser(new MicrophoneChooserDialog(), chooser_updateMicrophoneHandler);
						break;
					case ACTION_TOGGLE_MUTE_STREAMS:
						controller.toggleStreamsVolume();
						break;
				}

			}



			private function chooser_updateMicrophoneHandler(index:int):void
			{
				controller.setMicrophone(index);
			}

			private function chooser_updateCameraHandler(index:String):void
			{
				controller.setCamera(index);
			}

			private function invokeChooser(chooser:ChooserDialogBase, updateFunction:Function):void
			{
				chooser.width = systemManager.document.width - 40;
				chooser.addEventListener("close", onChooserClosed);
				chooser.addEventListener("dataChange", onItemClicked);


				PopUpManager.addPopUp(chooser,
					DisplayObject(systemManager.document), true);
				PopUpManager.centerPopUp(chooser);

				function onChooserClosed(e:Event):void{
					PopUpManager.removePopUp(chooser);

					chooser.removeEventListener("close", onChooserClosed);
					chooser.removeEventListener("dataChange", onItemClicked);
				}

				function onItemClicked(e:Event):void{
					updateFunction(chooser.data);
					onChooserClosed(null);


				}
			}





			private var firstPopup:Boolean = true;

			private function onOutsideClick(e:MouseEvent):void
			{
				//trace(options.x, options.y, e.stageX, e.stageY);
				if (!options.hitTestPoint(e.stageX, e.stageY))
				{
					onTimerCompleted(null);
				}

			}

			private function showDropDownOptions(comp:IUIComponent,opts:ArrayCollection):void
			{
				
				if (firstPopup)
				{
					removeElement(options);
					options.visible = true;
					firstPopup = false;
				}
				PopUpManager.addPopUp(options, DisplayObject(FlexGlobals.topLevelApplication), false);

				systemManager.stage.addEventListener(MouseEvent.MOUSE_DOWN, onOutsideClick);



				options.dataProvider = opts;
				callLater(function():void{
						options.move((comp.x + comp.width), comp.y + comp.height)
					});


			}

			

			private function options_rollHandler(e:Event):void
			{
				if (e.type == MouseEvent.ROLL_OVER)
				{
					timer.reset()
				}
				else
				{
					timer.start()
				}
			}

			private function options_creationCompleteHandler(e:Event):void
			{
				options.removeEventListener(e.type, options_creationCompleteHandler);
				options.addEventListener('itemClicked', optionsGroup_itemClickHandler)
			}

			public function dispose():void
			{
				onTimerCompleted(null);
				options.addEventListener('itemClicked', optionsGroup_itemClickHandler)
				webcam.removeEventListener(MouseEvent.CLICK, webcam_clickHandler);
				microphone.removeEventListener(MouseEvent.CLICK, microphone_clickHandler);
				timer.stop();
				timer.removeEventListener(TimerEvent.TIMER_COMPLETE, onTimerCompleted);
				controller = null;
			
			}

			protected function webcam_clickHandler(event:MouseEvent):void
			{
				showDropDownOptions(webcam,dpWebCamOptions);
				// TODO Auto-generated method stub
			}


			protected function microphone_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				showDropDownOptions(microphone,dpMicOptions)
			}
		]]>
	</fx:Script>
	
		<s:Button skinClass="com.conceptualideas.chat.plugins.video.skins.WebCamButtonSkin"
				  id="webcam"
				  click="webcam_clickHandler(event)"
				  useHandCursor="true"
				  buttonMode="true"
				  left="5" top="0"/>
		<s:Button id="microphone" top="0"
				  useHandCursor="true"
				  buttonMode="true"
				  click="microphone_clickHandler(event)"
				  skinClass="com.conceptualideas.chat.plugins.video.skins.MicrophoneButtonSkin" left="34"/>
	


	

	<s:SkinnableDataContainer id="options"
							  visible="false"
							  rollOut="options_rollHandler(event)"
							  rollOver="options_rollHandler(event)"
							  creationComplete="options_creationCompleteHandler(event)">


	</s:SkinnableDataContainer>
	<s:Group width="100%"
			 id="dock"
			 top="22"
			 left="2"
			 right="2"
			 bottom="0">
		<s:layout>
			<layouts:FlowLayout horizontalGap="2"/>

		</s:layout>
	</s:Group>

</s:Group>
